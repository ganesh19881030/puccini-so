{
  "version": "1.0",
  "metadata": {
    "puccini-js": {
      "concat": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.3.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.3.1\n\nfunction evaluate() {\n  var a = [];\n  var length = arguments.length;\n  for (var i = 0; i \u003c length; i++) {\n    var argument = arguments[i];\n    if (argument.$string !== undefined)\n      argument = argument.$string;\n    a.push(argument);\n  }\n  return a.join('');\n}",
      "equal": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v1, v2) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  return tosca.getComparable(v1) == tosca.getComparable(v2);\n}",
      "get_artifact": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.8.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.8.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.8.1\n\nfunction evaluate() {\n  return 'TODO';\n}",
      "get_attribute": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.5.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.5.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.5.1\n\nclout.exec('tosca.helpers');\n\nfunction evaluate(entity, attribute) {\n  var length = arguments.length;\n  if (length \u003c 2)\n    throw 'must have at least 2 arguments';\n  var nodeTemplate = tosca.getNodeTemplate(entity);\n  var attributes = nodeTemplate.attributes;\n  if (!(attribute in attributes))\n    throw puccini.sprintf('attribute \"%s\" not found in \"%s\"', attribute, nodeTemplate.name);\n  var r = clout.coerce(attributes[attribute]);\n  for (var i = 2; i \u003c length; i++)\n    r = r[arguments[i]];\n  return r;\n}",
      "get_input": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.4.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.4.1\n\nclout.exec('tosca.helpers');\n\nfunction evaluate(input) {\n  if (arguments.length !== 1)\n    throw 'must have 1 argument';\n  if (!tosca.isTosca(clout))\n    throw 'Clout is not TOSCA';\n  var inputs = clout.properties.tosca.inputs;\n  if (!(input in inputs))\n    throw puccini.sprintf('input \"%s\" not found', input);\n  var r = inputs[input];\n  r = clout.coerce(r);\n  return r;\n}",
      "get_nodes_of_type": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.7.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.7.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.7.1\n\nclout.exec('tosca.helpers');\n\nfunction evaluate(typeName) {\n  if (arguments.length !== 1)\n    throw 'must have 1 argument';\n  var names = [];\n  for (var name in clout.vertexes) {\n    var vertex = clout.vertexes[name];\n    if (tosca.isTosca(vertex))\n      names.push(vertex.properties.name);\n  }\n  return names;\n}",
      "get_operation_output": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.6.1\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.6.1\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.6.1\n\nfunction evaluate() {\n  return 'TODO';\n}",
      "get_property": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.4.2\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.2\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.4.2\n\nclout.exec('tosca.helpers');\n\nfunction evaluate(entity, property) {\n  var length = arguments.length;\n  if (length \u003c 2)\n    throw 'must have at least 2 arguments';\n  var nodeTemplate = tosca.getNodeTemplate(entity);\n  var properties = nodeTemplate.properties;\n  if (!(property in properties))\n    throw puccini.sprintf('property \"%s\" not found in \"%s\"', property, nodeTemplate.name);\n  var r = clout.coerce(properties[property]);\n  for (var i = 2; i \u003c length; i++)\n    r = r[arguments[i]];\n  return r;\n}",
      "greater_or_equal": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v1, v2) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  return tosca.getComparable(v1) \u003e= tosca.getComparable(v2);\n}",
      "greater_than": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v1, v2) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  return tosca.getComparable(v1) \u003e tosca.getComparable(v2);\n}",
      "in_range": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v, lower, upper) {\n  if (arguments.length !== 3)\n    throw 'must have 2 arguments';\n  v = tosca.getComparable(v);\n  return (v \u003e= tosca.getComparable(lower)) \u0026\u0026 (v \u003c= tosca.getComparable(upper));\n}",
      "join": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.3.2\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.2\n\nfunction evaluate() {\n  var length = arguments.length;\n  if ((length \u003c 1) || (length \u003e 2))\n    throw 'must have 1 or 2 arguments';\n  var delimiter = (length == 2) ? arguments[1] : '';\n  var args = arguments[0];\n  length = args.length;\n  var a = [];\n  for (var i = 0; i \u003c length; i++) {\n    var argument = args[i];\n    if (argument.$string !== undefined)\n      argument = argument.$string;\n    a.push(argument);\n  }\n  return a.join(delimiter);\n}",
      "length": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nfunction validate(v, length) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  if (v.$string !== undefined)\n    v = v.$string;\n  return v.length == length;\n}",
      "less_or_equal": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v1, v2) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  return tosca.getComparable(v1) \u003c= tosca.getComparable(v2);\n}",
      "less_than": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nclout.exec('tosca.helpers');\n\nfunction validate(v1, v2) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  return tosca.getComparable(v1) \u003c tosca.getComparable(v2);\n}",
      "max_length": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nfunction validate(v, length) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  if (v.$string !== undefined)\n    v = v.$string;\n  return v.length \u003c= length;\n}",
      "min_length": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nfunction validate(v, length) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  if (v.$string !== undefined)\n    v = v.$string;\n  return v.length \u003e= length;\n}",
      "pattern": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nfunction validate(v, re) {\n  if (arguments.length !== 2)\n    throw 'must have 1 argument';\n  if (v.$string !== undefined)\n    v = v.$string;\n  return new RegExp('^' + re + '$').test(v);\n}",
      "schema": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n\nfunction validate() {\n  // TODO\n  return true;\n}",
      "token": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 4.3.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 4.3.2\n\nfunction evaluate(v, separators, index) {\n  if (arguments.length !== 3)\n    throw 'must have 3 arguments';\n  if (v.$string !== undefined)\n    v = v.$string;\n  var s = v.split(new RegExp('[' + escape(separators) + ']'));\n  return s[index];\n}\n\nfunction escape(s) {\n  return s.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$\u0026');\n}",
      "tosca": {
        "coerce": "clout.exec('tosca.utils');\n\ntosca.coerce();\n\npuccini.write(clout)",
        "helpers": "var tosca = {};\n\ntosca.isTosca = function(o, kind) {\n  if (o.metadata['puccini-tosca'] !== undefined) {\n    o = o.metadata['puccini-tosca'];\n    if (o.version === '1.0') {\n      if (kind !== undefined)\n        return kind === o.kind;\n      return true;\n    }\n  }\n  return false;\n};\n\ntosca.isNodeTemplate = function(vertex, typeName) {\n  if (tosca.isTosca(vertex, 'nodeTemplate')) {\n    if (typeName !== undefined)\n      return typeName in vertex.properties.types;\n    return true;\n  }\n  return false;\n};\n\ntosca.getNodeTemplate = function(entity) {\n  var vertex;\n  switch (entity) {\n  case 'SELF':\n    vertex = site;\n    break;\n  case 'SOURCE':\n    vertex = source;\n    break;\n  case 'TARGET':\n    vertex = target;\n    break;\n  case 'HOST':\n    vertex = tosca.getHost(site);\n    break;\n  default:\n    for (var vertexId in clout.vertexes) {\n      var vertex = clout.vertexes[vertexId];\n      if (tosca.isNodeTemplate(vertex) \u0026\u0026 (vertex.properties.name === entity))\n        return vertex.properties;\n    }\n    throw puccini.sprintf('node template \"%s\" not found', entity);\n  }\n  if (!tosca.isTosca(vertex))\n    throw puccini.sprintf('node template \"%s\" not found', entity);\n  return vertex.properties;\n};\n\ntosca.getHost = function(vertex) {\n  for (var e = 0; e \u003c vertex.edgesOut.length; e++) {\n    var edge = vertex.edgesOut[e];\n    if (tosca.isTosca(edge, 'relationship')) {\n      for (var typeName in edge.properties.types) {\n        var type = edge.properties.types[typeName];\n        if (type.metadata.role === 'host')\n          return edge.target;\n      }\n    }\n  }\n  return {};\n};\n\ntosca.getComparable = function(v) {\n  if ((v === undefined) || (v === null))\n    return null;\n  if (v.$number !== undefined)\n    return v.$number;\n  if (v.$string !== undefined)\n    return v.$string;\n  return v;\n};",
        "resolve": "clout.exec('tosca.utils');\n\n// Remove existing relationships\nvar nodeTemplateVertexes = [];\nfor (var vertexId in clout.vertexes) {\n  var vertex = clout.vertexes[vertexId];\n  if (tosca.isNodeTemplate(vertex)) {\n    nodeTemplateVertexes.push(vertex);\n    for (var e = 0; e \u003c vertex.edgesOut.length; e++) {\n      edge = vertex.edgesOut[e];\n      if (tosca.isTosca(edge, 'relationship'))\n        edge.remove();\n    }\n  }\n}\n\n// For consistent results, we will sort the node templates by name\nnodeTemplateVertexes.sort(function(a, b) {\n  return a.properties.name \u003c b.properties.name ? -1 : 1;\n});\n\ntosca.toCoercibles();\n\n// Resolve all requirements\nfor (var v = 0; v \u003c nodeTemplateVertexes.length; v++) {\n  var vertex = nodeTemplateVertexes[v];\n  var nodeTemplate = vertex.properties;\n  var requirements = nodeTemplate.requirements;\n  for (var r = 0; r \u003c requirements.length; r++) {\n    var requirement = requirements[r];\n    resolve(vertex, nodeTemplate, requirement);\n  }\n}\n\n// Check that all capabilities have their minimum relationship count\nfor (var v = 0; v \u003c nodeTemplateVertexes.length; v++) {\n  var vertex = nodeTemplateVertexes[v];\n  var nodeTemplate = vertex.properties;\n  var capabilities = nodeTemplate.capabilities;\n  for (var capabilityName in capabilities) {\n    var capability = capabilities[capabilityName];\n    var relationshipCount = countRelationships(vertex, capabilityName);\n    var minRelationshipCount = capability.minRelationshipCount;\n    if (relationshipCount \u003c minRelationshipCount)\n      notEnoughRelationships(nodeTemplate.name, capabilityName, relationshipCount, minRelationshipCount)\n  }\n}\n\ntosca.unwrapCoercibles();\n\npuccini.write(clout)\n\nfunction resolve(sourceVertex, sourceNodeTemplate, requirement) {\n  var path = requirement.path;\n  var name = requirement.name;\n\n  var candidates = gatherCandidateNodeTemplates(sourceVertex, requirement);\n  if (candidates.length === 0) {\n    puccini.log.warningf(path, name, 'there are no candidate node templates');\n    return;\n  }\n\n  candidates = gatherCandidateCapabilities(requirement, candidates);\n  if (candidates.length === 0) {\n    puccini.log.warningf('%s: could not satisfy \"%s\" because no candidate node template provides required capability', path, name);\n    return;\n  }\n\n  // Gather priority candidates: those that have not yet fulfilled their minimum relationship count\n  var priorityCandidates = [];\n  for (var c = 0; c \u003c candidates.length; c++) {\n    var candidate = candidates[c];\n    if ((candidate.capability.minRelationshipCount !== 0) \u0026\u0026 (countRelationships(candidate.vertex, candidate.capabilityName) \u003c candidate.capability.minRelationshipCount))\n      priorityCandidates.push(candidate);\n  }\n\n  var chosen = null;\n\n  if (priorityCandidates.length !== 0)\n    // Of the priority candidates, pick the one with the highest minimum relationship count\n    // (needs to be fulfilled soonest)\n    for (var c = 0; c \u003c priorityCandidates.length; c++) {\n      var candidate = priorityCandidates[c];\n      if ((chosen === null) || (candidate.capability.minRelationshipCount \u003e chosen.capability.minRelationshipCount))\n        chosen = candidate;\n    }\n  else\n    // Of the candidates, pick the one with highest maximum relationship count\n    // (has the most room)\n    for (var c = 0; c \u003c candidates.length; c++) {\n      candidate = candidates[c];\n      if ((chosen === null) || isMaxCountGreater(candidate.capability.maxRelationshipCount, chosen.capability.maxRelationshipCount))\n        chosen = candidate;\n    }\n\n  puccini.log.infof('{resolve} %s: satisfied \"%s\" with capability \"%s\" in node template \"%s\"', path, name, chosen.capabilityName, chosen.nodeTemplateName);\n  addRelationship(sourceVertex, requirement, chosen.vertex, chosen.capabilityName);\n}\n\nfunction gatherCandidateNodeTemplates(sourceVertex, requirement) {\n  var path = requirement.path;\n  var nodeTemplateName = requirement.nodeTemplateName;\n  var nodeTypeName = requirement.nodeTypeName;\n  var nodeTemplatePropertyConstraints = requirement.nodeTemplatePropertyConstraints;\n  var capabilityPropertyConstraintsMap = requirement.capabilityPropertyConstraints;\n\n  var candidates = [];\n  for (var v = 0; v \u003c nodeTemplateVertexes.length; v++) {\n    var vertex = nodeTemplateVertexes[v];\n    var candidateNodeTemplate = vertex.properties;\n    var candidateNodeTemplateName = candidateNodeTemplate.name;\n\n    if ((nodeTemplateName !== '') \u0026\u0026 (nodeTemplateName !== candidateNodeTemplateName)) {\n      puccini.log.debugf('{resolve} %s: node template \"%s\" is not named \"%s\"', path, candidateNodeTemplateName, nodeTemplateName);\n      continue;\n    }\n\n    if ((nodeTypeName !== '') \u0026\u0026 !(nodeTypeName in candidateNodeTemplate.types)) {\n      puccini.log.debugf('{resolve} %s: node template \"%s\" is not of type \"%s\"', path, candidateNodeTemplateName, nodeTypeName);\n      continue;\n    }\n\n    // Node filter\n    if ((nodeTemplatePropertyConstraints.length !== 0) \u0026\u0026 !arePropertiesValid(path, sourceVertex, 'node template', candidateNodeTemplateName, candidateNodeTemplate, nodeTemplatePropertyConstraints)) {\n      puccini.log.debugf('{resolve} %s: properties of node template \"%s\" do not match constraints', path, candidateNodeTemplateName);\n      continue;\n    }\n\n    var candidateCapabilities = candidateNodeTemplate.capabilities;\n\n    // Capability filter\n    if (capabilityPropertyConstraintsMap.length !== 0) {\n      var valid = true;\n      for (var candidateCapabilityName in candidateCapabilities) {\n        var candidateCapability = candidateCapabilities[candidateCapabilityName];\n        var capabilityPropertyConstraints = capabilityPropertyConstraintsMap[candidateCapabilityName];\n        if ((capabilityPropertyConstraints !== undefined) \u0026\u0026 (capabilityPropertyConstraints.length !== 0) \u0026\u0026 !arePropertiesValid(path, sourceVertex, 'capability', candidateCapabilityName, candidateCapability, capabilityPropertyConstraints)) {\n          puccini.log.debugf('{resolve} %s: properties of capability \"%s\" in node template \"%s\" do not match constraints', path, candidateCapabilityName, candidateNodeTemplateName);\n          valid = false;\n          break;\n        }\n      }\n      if (!valid)\n        continue;\n    }\n\n    candidates.push({\n      vertex: vertex,\n      nodeTemplateName: candidateNodeTemplateName,\n      capabilities: candidateCapabilities\n    });\n  }\n\n  return candidates;\n}\n\nfunction gatherCandidateCapabilities(requirement, candidateNodeTemplates) {\n  var path = requirement.path;\n  var capabilityName = requirement.capabilityName;\n  var capabilityTypeName = requirement.capabilityTypeName;\n\n  var candidates = [];\n  for (var c = 0; c \u003c candidateNodeTemplates.length; c++) {\n    var candidate = candidateNodeTemplates[c];\n    var candidateVertex = candidate.vertex;\n    var candidateNodeTemplateName = candidate.nodeTemplateName;\n\n    var candidateCapabilities = [];\n    for (var candidateCapabilityName in candidate.capabilities) {\n      candidateCapabilities.push({\n        name: candidateCapabilityName,\n        capability: candidate.capabilities[candidateCapabilityName]\n      });\n    }\n\n    // For consistent results, we will sort the candidate capabilities by name\n    candidateCapabilities.sort(function(a, b) {\n      return a.name \u003c b.name ? -1 : 1;\n    });\n\n    for (var cc = 0; cc \u003c candidateCapabilities.length; cc++) {\n      var candidateCapabilityName = candidateCapabilities[cc].name;\n\n      if ((capabilityName !== '') \u0026\u0026 (capabilityName !== candidateCapabilityName)) {\n        puccini.log.debugf('{resolve} %s: capability \"%s\" in node template \"%s\" is not named \"%s\"', path, candidateCapabilityName, candidateNodeTemplateName, capabilityName);\n        continue;\n      }\n\n      var candidateCapability = candidateCapabilities[cc].capability;\n\n      if ((capabilityTypeName !== '') \u0026\u0026 !(capabilityTypeName in candidateCapability.types)) {\n        // puccini.log.debugf('{resolve} %s: capability \"%s\" in node template \"%s\" is not of type \"%s\"', path, candidateCapabilityName, candidateNodeTemplateName, capabilityTypeName);\n        continue;\n      }\n\n      var maxRelationshipCount = candidateCapability.maxRelationshipCount;\n      if ((maxRelationshipCount !== -1) \u0026\u0026 (countRelationships(candidateVertex, candidateCapabilityName) === maxRelationshipCount)) {\n        puccini.log.debugf('{resolve} %s: capability \"%s\" in node template \"%s\" already has %d relationships, the maximum allowed', path, candidateCapabilityName, candidateNodeTemplateName, maxRelationshipCount);\n        continue;\n      }\n\n      candidates.push({\n        vertex: candidateVertex,\n        nodeTemplateName: candidateNodeTemplateName,\n        capability: candidateCapability,\n        capabilityName: candidateCapabilityName\n      });\n    }\n  }\n\n  return candidates;\n}\n\nfunction addRelationship(sourceVertex, requirement, targetVertex, capabilityName) {\n  var edge = sourceVertex.newEdgeTo(targetVertex);\n  edge.metadata['puccini-tosca'] = {\n    version: '1.0',\n    kind: 'relationship'\n  };\n\n  var relationship = requirement.relationship;\n  if (relationship)\n    edge.properties = {\n      name: requirement.name,\n      description: relationship.description,\n      types: relationship.types,\n      properties: relationship.properties,\n      attributes: relationship.attributes,\n      interfaces: relationship.interfaces,\n      capability: capabilityName\n    };\n  else\n    // Untyped relationship\n    edge.properties = {\n      name: requirement.name,\n      description: '',\n      types: {},\n      properties: {},\n      attributes: {},\n      interfaces: {},\n      capability: capabilityName\n    };\n}\n\nfunction countRelationships(vertex, capabilityName) {\n  var count = 0;\n  for (var e = 0; e \u003c vertex.edgesIn.length; e++) {\n    var edge = vertex.edgesIn[e];\n    if (tosca.isTosca(edge, 'relationship') \u0026\u0026 (edge.properties.capability === capabilityName))\n      count++;\n  }\n  return count;\n}\n\nfunction arePropertiesValid(path, sourceVertex, kind, name, entity, constraintsMap) {\n  var valid = true;\n\n  var properties = entity.properties;\n  for (var propertyName in constraintsMap) {\n    puccini.log.debugf('{resolve} %s: applying constraints to property \"%s\" of %s \"%s\"', path, propertyName, kind, name);\n\n    var property = properties[propertyName];\n    if (property === undefined) {\n      // return false; GOJA: returning from inside for-loop is broken\n      valid = false;\n      break;\n    }\n\n    var constraints = constraintsMap[propertyName];\n    constraints = clout.newConstraints(constraints, sourceVertex, sourceVertex, entity)\n    if (!constraints.validate(property)) {\n      // return false; GOJA: returning from inside for-loop is broken\n      valid = false;\n      break;\n    }\n  }\n\n  return valid;\n}\n\nfunction isMaxCountGreater(a, b) {\n  if (a == -1)\n    return b !== -1;\n  else if (b == -1)\n    return false;\n  return a \u003e b;\n}\n\nfunction unsatisfied(path, name, message) {\n  if (typeof problems === 'undefined')\n    throw puccini.sprintf('%s: could not satisfy \"%s\" because %s', path, name, message);\n  else\n    problems.reportf('%s: could not satisfy \"%s\" because %s', path, name, message);\n}\n\nfunction notEnoughRelationships(nodeTemplateName, capabilityName, relationshipCount, minRelationshipCount) {\n  if (typeof problems === 'undefined')\n    throw puccini.sprintf('capability \"%s\" of node template \"%s\" does not have enough relationships: %d \u003c %d', capabilityName, nodeTemplateName, relationshipCount, minRelationshipCount);\n  else\n    problems.reportf('capability \"%s\" of node template \"%s\" does not have enough relationships: %d \u003c %d', capabilityName, nodeTemplateName, relationshipCount, minRelationshipCount);\n}",
        "utils": "clout.exec('tosca.helpers');\n\ntosca.toCoercibles = function() {\n  tosca.traverseValues(clout.newCoercible);\n};\n\ntosca.unwrapCoercibles = function() {\n  tosca.traverseValues(clout.unwrap);\n};\n\ntosca.coerce = function() {\n  tosca.toCoercibles();\n  tosca.traverseValues(clout.coerce);\n};\n\ntosca.traverseValues = function(traverser) {\n  if (tosca.isTosca(clout)) {\n    tosca.traverseObjectValues(traverser, clout.properties.tosca.inputs);\n    tosca.traverseObjectValues(traverser, clout.properties.tosca.outputs);\n  }\n\n  for (var vertexId in clout.vertexes) {\n    var vertex = clout.vertexes[vertexId];\n    if (tosca.isNodeTemplate(vertex)) {\n      var nodeTemplate = vertex.properties;\n\n      tosca.traverseObjectValues(traverser, nodeTemplate.properties, vertex);\n      tosca.traverseObjectValues(traverser, nodeTemplate.attributes, vertex);\n      tosca.traverseInterfaceValues(traverser, nodeTemplate.interfaces, vertex)\n\n      for (var capabilityName in nodeTemplate.capabilities) {\n        var capability = nodeTemplate.capabilities[capabilityName];\n        tosca.traverseObjectValues(traverser, capability.properties, vertex);\n        tosca.traverseObjectValues(traverser, capability.attributes, vertex);\n      }\n\n      for (var artifactName in nodeTemplate.artifacts) {\n        var artifact = nodeTemplate.artifacts[artifactName];\n        tosca.traverseObjectValues(traverser, artifact.properties, vertex);\n      }\n\n      for (var e = 0; e \u003c vertex.edgesOut.length; e++) {\n        var edge = vertex.edgesOut[e];\n        if (!tosca.isTosca(edge, 'relationship'))\n          continue;\n\n        var relationship = edge.properties;\n        tosca.traverseObjectValues(traverser, relationship.properties, edge, vertex, edge.target);\n        tosca.traverseObjectValues(traverser, relationship.attributes, edge, vertex, edge.target);\n        tosca.traverseInterfaceValues(traverser, relationship.interfaces, edge, vertex, edge.target);\n      }\n    } else if (tosca.isTosca(vertex, 'group')) {\n      var group = vertex.properties;\n\n      tosca.traverseObjectValues(traverser, group.properties, vertex);\n      tosca.traverseInterfaceValues(traverser, group.interfaces, vertex)\n    } else if (tosca.isTosca(vertex, 'policy')) {\n      var policy = vertex.properties;\n\n      tosca.traverseObjectValues(traverser, policy.properties, vertex);\n    }\n  }\n};\n\ntosca.traverseInterfaceValues = function(traverser, interfaces, site, source, target) {\n  for (var interfaceName in interfaces) {\n    var interface_ = interfaces[interfaceName];\n    tosca.traverseObjectValues(traverser, interface_.inputs, site, source, target);\n    for (var operationName in interface_.operations)\n      tosca.traverseObjectValues(traverser, interface_.operations[operationName].inputs, site, source, target);\n  }\n};\n\ntosca.traverseObjectValues = function(traverser, o, site, source, target) {\n  for (var k in o)\n    o[k] = traverser(o[k], site, source, target);\n};"
      },
      "valid_values": "// [TOSCA-Simple-Profile-YAML-v1.3] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3\n// [TOSCA-Simple-Profile-YAML-v1.1] @ 3.5.2\n\nfunction validate(v) {\n  var values = Array.prototype.slice.call(arguments, 1);\n  return values.indexOf(v) !== -1;\n}"
    },
    "puccini-tosca": {
      "history": [
        "2020-04-05T16:27:40.8979587-07:00"
      ],
      "version": "1.0"
    }
  },
  "properties": {
    "tosca": {
      "description": "Firewall VNF Service",
      "inputs": {
        "auth_url": {
          "constraints": [],
          "description": "Authentication URL",
          "value": "http://localhost/"
        },
        "cidr": {
          "constraints": [],
          "description": "",
          "value": "192.168.1.0"
        },
        "domain_name": {
          "constraints": [],
          "description": "Domain-level authorization scope (name or ID)",
          "value": "default"
        },
        "lower_threshold": {
          "constraints": [],
          "description": "Packet rate threshold below which to trigger rate limiter",
          "value": 10
        },
        "network_name": {
          "constraints": [],
          "description": "Name of this network",
          "value": "public"
        },
        "num_streams": {
          "constraints": [
            {
              "constraints": [],
              "description": "",
              "functionCall": {
                "arguments": [
                  {
                    "constraints": [],
                    "description": "",
                    "value": 1
                  },
                  {
                    "constraints": [],
                    "description": "",
                    "value": 10
                  }
                ],
                "location": "19,5",
                "name": "in_range",
                "path": "topology_template.inputs[\"num_streams\"]",
                "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
              }
            }
          ],
          "description": "",
          "value": 5
        },
        "password": {
          "constraints": [],
          "description": "Authentication password",
          "value": "password"
        },
        "project_id": {
          "constraints": [],
          "description": "Project-level authentication scope (name or ID)",
          "value": "id101"
        },
        "region_name": {
          "constraints": [],
          "description": "Authentication region name",
          "value": "DFW"
        },
        "selected_flavour": {
          "constraints": [],
          "description": "VNF deployment flavour selected by the consumer. ",
          "value": "simple"
        },
        "upper_threshold": {
          "constraints": [],
          "description": "Packet rate threshold abovewhich to trigger rate limiter",
          "value": 80
        },
        "url": {
          "constraints": [],
          "description": "Service URL (when using the service token)",
          "value": "http://localhost"
        },
        "username": {
          "constraints": [],
          "description": "Authentication username",
          "value": "cci"
        }
      },
      "metadata": {},
      "outputs": {
        "sink_ip_address": {
          "constraints": [],
          "description": "",
          "functionCall": {
            "arguments": [
              {
                "constraints": [],
                "description": "",
                "value": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port"
              },
              {
                "constraints": [],
                "description": "",
                "value": "ip_address"
              }
            ],
            "location": "133,7",
            "name": "get_attribute",
            "path": "topology_template.outputs[\"sink_ip_address\"].value",
            "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
          }
        }
      }
    }
  },
  "vertexes": {
    "_1a8tt7Ice1hmOLx7bijHW1iSsTF": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Openstack resource ",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "common__resources__openstack_resource.yaml.openstack",
        "properties": {
          "auth_url": {
            "constraints": [],
            "description": "Authentication URL",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "auth_url"
                }
              ],
              "location": "49,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"auth_url\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "domain_name": {
            "constraints": [],
            "description": "Domain-level authorization scope (name or ID)",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "domain_name"
                }
              ],
              "location": "51,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"domain_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "password": {
            "constraints": [],
            "description": "Authentication password",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "password"
                }
              ],
              "location": "54,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"password\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "project_id": {
            "constraints": [],
            "description": "Project-level authentication scope (name or ID)",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "project_id"
                }
              ],
              "location": "52,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"project_id\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "region_name": {
            "constraints": [],
            "description": "Authentication region name",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "55,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "url": {
            "constraints": [],
            "description": "Service URL (when using the service token)",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "url"
                }
              ],
              "location": "50,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"url\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          },
          "username": {
            "constraints": [],
            "description": "Authentication username",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "username"
                }
              ],
              "location": "53,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"openstack\"].properties[\"username\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/resources/openstack_resource.yaml"
            }
          }
        },
        "requirements": [],
        "types": {
          "os.nodes.Cloud": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttAsZAOReiHmMcEHEaFtqORb": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {},
        "capabilities": {
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Packet Generator network function in support of Proof of Concept",
        "directives": [
          "substitute:_1a8ttKOLEvnXy3bZvEDUnkh3iVj:_1a8ttKoYKl4oQFcgaXhLMk7H0uu:_1a8ttLONg2PQmxOX8BCOFfIhDTS:_1a8ttLa944pKeUWC3s6cjfvcXT8:_1a8ttFhWM7Z9eQ1fMlbRtbHDz1O:_1a8ttGNKTSRo1vneaC8creDq9Un:_1a8ttHbJgHxcA4DlO79QH4m8Eon:_1a8ttHvXo4p42Za6RbXoF8seRo8"
        ],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator",
        "properties": {
          "descriptor_id": {
            "constraints": [],
            "description": "Globally unique identifier of the Network Function",
            "value": "d4fe77a8-fa30-4de3-9943-0dca9b66138c"
          },
          "flavour_id": {
            "constraints": [],
            "description": "Identifier of the Deployment Flavour within the Network Function",
            "value": "simple"
          },
          "num_streams": {
            "constraints": [
              {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": 1
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": 10
                    }
                  ],
                  "location": "51,9",
                  "name": "in_range",
                  "path": "topology_template.node_templates[\"packet_generator\"].properties[\"num_streams\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
                }
              }
            ],
            "description": "Requested number of streams",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "num_streams"
                }
              ],
              "location": "51,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"packet_generator\"].properties[\"num_streams\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "product_name": {
            "constraints": [],
            "description": "Human readable name for the Network Function Product",
            "value": "CCI Packet Generator"
          },
          "provider": {
            "constraints": [],
            "description": "Provider of the Network Function",
            "value": "CCI"
          },
          "region_name": {
            "constraints": [],
            "description": "Name of the cloud region in which to deploy this function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "50,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"packet_generator\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "software_version": {
            "constraints": [],
            "description": "Software version of the Network Function",
            "value": "1.0.0"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "unprotected_network",
            "nodeTemplateName": "unprotected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_generator\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.RouteTarget",
            "name": "destination",
            "nodeTemplateName": "protected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_generator\"].requirements[1]",
            "relationship": null
          },
          {
            "capabilityName": "unprotected_forwarder",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Forwarder",
            "name": "gateway",
            "nodeTemplateName": "firewall",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_generator\"].requirements[2]",
            "relationship": null
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Endpoint",
            "name": "target",
            "nodeTemplateName": "packet_sink",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "cci.nodes.PacketSink",
            "path": "topology_template.node_templates[\"packet_generator\"].requirements[3]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network connection relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.ConnectsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.4",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.NetworkFunction": {
            "metadata": {}
          },
          "cci.nodes.PacketGenerator": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "unprotected_network",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttC07j78cgdceo7nHcFj7IA8"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "route_target",
            "description": "",
            "interfaces": {},
            "name": "destination",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttEgQCE2yDrWQAUyVurUO6ip"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "unprotected_forwarder",
            "description": "",
            "interfaces": {},
            "name": "gateway",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttBR3SkvahGvd6fRNWbJRA4v"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "sink",
            "description": "This type represents a network connection relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "target",
            "properties": {},
            "types": {
              "tosca.relationships.ConnectsTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.4",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttBqMk6gHbnAAckfvPy3keFd"
        }
      ]
    },
    "_1a8ttBR3SkvahGvd6fRNWbJRA4v": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "traffic_volume": {
            "constraints": [],
            "description": "Packet volume expressed in number of packets received per 10 second interval",
            "value": null
          }
        },
        "capabilities": {
          "protected_forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "unprotected_forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Firewall network function in support of Proof of Concept",
        "directives": [
          "substitute:_1a8ttHEqmYsCRhlnehoQPKLnifv:_1a8ttHlvfdwtpiOts2zlEkE0nTb:_1a8ttIluOI5zwDJXfMQD2RAn6jW:_1a8ttJZXIp5KZdza6foBa6ISKxw:_1a8ttKKqPdOpmPYxQbwZJIRFznE:_1a8ttF03Mbd0IwmJ8MqwNsbUtni:_1a8ttGMXDujnydIRxXR45Lhv4jo:_1a8ttGSsgtwHNpBFDFfoUgxCwY6"
        ],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          },
          "monitor": {
            "description": "Interface to monitor traffic volume received by network functions",
            "inputs": {},
            "notifications": {
              "traffic_volume_notification": {
                "dependencies": [],
                "description": "",
                "host": "",
                "implementation": "",
                "outputs": {
                  "traffic_volume": {
                    "attributeName": "traffic_volume",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall"
                  }
                },
                "timeout": 0
              }
            },
            "operations": {},
            "types": {
              "cci.interfaces.TrafficMonitor": {
                "metadata": {}
              }
            }
          }
        },
        "name": "firewall",
        "properties": {
          "descriptor_id": {
            "constraints": [],
            "description": "Globally unique identifier of the Network Function",
            "value": "33eabee9-6ef7-44f1-827b-f909226aecb9"
          },
          "flavour_id": {
            "constraints": [
              {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "simple"
                    }
                  ],
                  "location": "40,9",
                  "name": "valid_values",
                  "path": "topology_template.node_templates[\"firewall\"].properties[\"flavour_id\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
                }
              }
            ],
            "description": "Identifier of the Deployment Flavour within the Network Function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "selected_flavour"
                }
              ],
              "location": "40,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"firewall\"].properties[\"flavour_id\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "product_name": {
            "constraints": [],
            "description": "Human readable name for the Network Function Product",
            "value": "CCI Firewall"
          },
          "provider": {
            "constraints": [],
            "description": "Provider of the Network Function",
            "value": "CCI"
          },
          "region_name": {
            "constraints": [],
            "description": "Name of the cloud region in which to deploy this function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "39,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"firewall\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "software_version": {
            "constraints": [],
            "description": "Software version of the Network Function",
            "value": "1.0.0"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "protected_network",
            "nodeTemplateName": "protected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"firewall\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "unprotected_network",
            "nodeTemplateName": "unprotected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"firewall\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.Firewall": {
            "metadata": {}
          },
          "cci.nodes.NetworkFunction": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "protected_network",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttEgQCE2yDrWQAUyVurUO6ip"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "unprotected_network",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttC07j78cgdceo7nHcFj7IA8"
        }
      ]
    },
    "_1a8ttBqMk6gHbnAAckfvPy3keFd": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {},
        "capabilities": {
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "sink": {
            "attributes": {
              "ip_address": {
                "constraints": [],
                "description": "Note: This is the IP address as propagated up by the associated node's host (Compute) container.",
                "value": null
              }
            },
            "description": "This is the default TOSCA type that should be used or extended to define a network endpoint capability. This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports. By default the Endpoint is assumed to represent an address on a private network unless otherwise specified.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "initiator": {
                "constraints": [],
                "description": "The optional indicator of the direction of the connection.",
                "value": "source"
              },
              "network_name": {
                "constraints": [],
                "description": "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC | \u003cnetwork_name\u003e | \u003cnetwork_id\u003e.",
                "value": "PRIVATE"
              },
              "protocol": {
                "constraints": [],
                "description": "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http, https, ftp, tcp, udp, etc.",
                "value": "tcp"
              },
              "secure": {
                "constraints": [],
                "description": "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.",
                "value": false
              }
            },
            "types": {
              "tosca.capabilities.Endpoint": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.7",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Packet Sink network function in support of Proof of Concept",
        "directives": [
          "substitute:_1a8ttGFZ4gml6z1plLbPchrAO6J:_1a8ttGyMINCXYaa82Rg8vB74KGp:_1a8ttK28pdBKNGW2uvwv3C1YxPf:_1a8ttKUH2JsWTPNjSXJNKYwFaNd:_1a8ttMIUKnL8zUINFsBWEVVeRs6"
        ],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {
                  "sink_ip_address": {
                    "attributeName": "ip_address",
                    "capabilityName": "sink",
                    "nodeTemplateName": "packet_sink"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_sink",
        "properties": {
          "descriptor_id": {
            "constraints": [],
            "description": "Globally unique identifier of the Network Function",
            "value": "8fc3fa8a-e2fa-47a9-88a8-09c8ab7a17ea"
          },
          "flavour_id": {
            "constraints": [],
            "description": "Identifier of the Deployment Flavour within the Network Function",
            "value": "simple"
          },
          "product_name": {
            "constraints": [],
            "description": "Human readable name for the Network Function Product",
            "value": "CCI Packet Sink"
          },
          "provider": {
            "constraints": [],
            "description": "Provider of the Network Function",
            "value": "CCI"
          },
          "region_name": {
            "constraints": [],
            "description": "Name of the cloud region in which to deploy this function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "65,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"packet_sink\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "software_version": {
            "constraints": [],
            "description": "Software version of the Network Function",
            "value": "1.0.0"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "protected_network",
            "nodeTemplateName": "protected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_sink\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.RouteTarget",
            "name": "destination",
            "nodeTemplateName": "unprotected_network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_sink\"].requirements[1]",
            "relationship": null
          },
          {
            "capabilityName": "protected_forwarder",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Forwarder",
            "name": "gateway",
            "nodeTemplateName": "firewall",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "",
            "path": "topology_template.node_templates[\"packet_sink\"].requirements[2]",
            "relationship": null
          }
        ],
        "types": {
          "cci.nodes.NetworkFunction": {
            "metadata": {}
          },
          "cci.nodes.PacketSink": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "protected_network",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttEgQCE2yDrWQAUyVurUO6ip"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "route_target",
            "description": "",
            "interfaces": {},
            "name": "destination",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttC07j78cgdceo7nHcFj7IA8"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "protected_forwarder",
            "description": "",
            "interfaces": {},
            "name": "gateway",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttBR3SkvahGvd6fRNWbJRA4v"
        }
      ]
    },
    "_1a8ttC07j78cgdceo7nHcFj7IA8": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {},
        "capabilities": {
          "link": {
            "attributes": {},
            "description": "A node type that includes the Linkable capability indicates that it can be pointed by tosca.relationships.network.LinksTo relationship type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 1,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Linkable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.3",
                  "normative": "true"
                }
              }
            }
          },
          "route_target": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.RouteTarget": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "CCI network node. ",
        "directives": [
          "substitute:_1a8ttFCZYcQ1EQowDxf2GMoRWeK:_1a8ttKVb0brZCMhSi6zw52y2tCD:_1a8ttKex2qOqbRuPmB1rTPlApqE"
        ],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "unprotected_network",
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "The cidr block of the requested network.",
            "value": "192.168.20.0/24"
          },
          "network_name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_network"
          },
          "region_name": {
            "constraints": [],
            "description": "Name of the cloud region in which to deploy this function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "89,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"unprotected_network\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          }
        },
        "requirements": [],
        "types": {
          "cci.nodes.Network": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttCzcxN9tBA7t1w9KRpSxYho": {
      "metadata": {
        "puccini-tosca": {
          "kind": "policy",
          "version": "1.0"
        }
      },
      "properties": {
        "description": "Policy to limit the traffic volume received by a Network Function",
        "name": "packet_volume_limiter",
        "properties": {
          "lower_threshold": {
            "constraints": [],
            "description": "The packet volume value below which policy is to be triggered.  If the volume of packets falls below this value, the policy will be triggered.",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "lower_threshold"
                }
              ],
              "location": "95,7",
              "name": "get_input",
              "path": "topology_template.policies[0].properties[\"lower_threshold\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          },
          "upper_threshold": {
            "constraints": [],
            "description": "The packet volume value above which policy is to be triggered.  If the volume of packets exceeds this value, the policy will be triggered.",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "upper_threshold"
                }
              ],
              "location": "95,7",
              "name": "get_input",
              "path": "topology_template.policies[0].properties[\"upper_threshold\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          }
        },
        "types": {
          "cci.policy.PacketVolumeLimiter": {
            "metadata": {}
          },
          "tosca.policies.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.11.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "nodeTemplateTarget",
              "version": "1.0"
            }
          },
          "properties": {},
          "targetID": "_1a8ttBR3SkvahGvd6fRNWbJRA4v"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "policyTrigger",
              "version": "1.0"
            }
          },
          "properties": {},
          "targetID": "_1a8ttDQ7LDPkABkl28UxnUDSh0r"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "policyTrigger",
              "version": "1.0"
            }
          },
          "properties": {},
          "targetID": "_1a8ttDaUYYEdr9aEJApmfz5c3Bm"
        }
      ]
    },
    "_1a8ttDQ7LDPkABkl28UxnUDSh0r": {
      "metadata": {
        "puccini-tosca": {
          "kind": "policyTrigger",
          "version": "1.0"
        }
      },
      "properties": {
        "action": {
          "callOperation": null,
          "setNodeState": "",
          "update": {
            "num_streams": {
              "constraints": [],
              "description": "",
              "value": 4
            }
          }
        },
        "condition": {
          "traffic_volume": [
            {
              "constraints": [],
              "description": "",
              "functionCall": {
                "arguments": [
                  {
                    "constraints": [],
                    "description": "",
                    "value": "SELF"
                  },
                  {
                    "constraints": [],
                    "description": "",
                    "value": "upper_threshold"
                  }
                ],
                "location": "95,7",
                "name": "greater_than",
                "path": "topology_template.policies[0].triggers[\"traffic_high\"].condition[0]",
                "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
              }
            }
          ]
        },
        "description": "Triggering event based on packet volume below lower threshold",
        "event_type": "cci.interfaces.TrafficMonitor.traffic_volume_notification",
        "name": "traffic_high"
      },
      "edgesOut": []
    },
    "_1a8ttDaUYYEdr9aEJApmfz5c3Bm": {
      "metadata": {
        "puccini-tosca": {
          "kind": "policyTrigger",
          "version": "1.0"
        }
      },
      "properties": {
        "action": {
          "callOperation": null,
          "setNodeState": "",
          "update": {
            "num_streams": {
              "constraints": [],
              "description": "",
              "value": 6
            }
          }
        },
        "condition": {
          "traffic_volume": [
            {
              "constraints": [],
              "description": "",
              "functionCall": {
                "arguments": [
                  {
                    "constraints": [],
                    "description": "",
                    "value": "SELF"
                  },
                  {
                    "constraints": [],
                    "description": "",
                    "value": "lower_threshold"
                  }
                ],
                "location": "95,7",
                "name": "less_than",
                "path": "topology_template.policies[0].triggers[\"traffic_low\"].event_type[0]",
                "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
              }
            }
          ]
        },
        "description": "Triggering event based on packet volume below lower threshold",
        "event_type": "cci.interfaces.TrafficMonitor.traffic_volume_notification",
        "name": "traffic_low"
      },
      "edgesOut": []
    },
    "_1a8ttEgQCE2yDrWQAUyVurUO6ip": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {},
        "capabilities": {
          "link": {
            "attributes": {},
            "description": "A node type that includes the Linkable capability indicates that it can be pointed by tosca.relationships.network.LinksTo relationship type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 1,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Linkable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.3",
                  "normative": "true"
                }
              }
            }
          },
          "route_target": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.RouteTarget": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "CCI network node. ",
        "directives": [
          "substitute:_1a8ttHTorHfe7yU0O4sppixowIO:_1a8ttHjtWqnGdAgynhoH8FWHYdv:_1a8ttLlZVbyBeWQO8VR1dAVJlSu"
        ],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "protected_network",
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "The cidr block of the requested network.",
            "value": "192.168.10.0/24"
          },
          "network_name": {
            "constraints": [],
            "description": "",
            "value": "protected_network"
          },
          "region_name": {
            "constraints": [],
            "description": "Name of the cloud region in which to deploy this function",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "80,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"protected_network\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/firewall_service.yaml"
            }
          }
        },
        "requirements": [],
        "types": {
          "cci.nodes.Network": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttF03Mbd0IwmJ8MqwNsbUtni": {
      "metadata": {
        "puccini-tosca": {
          "kind": "substitution",
          "version": "1.0"
        }
      },
      "properties": {
        "properties": {
          "region_name": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "40,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
            }
          }
        },
        "substitutionFilter": [
          {
            "capabilityPropertyConstraints": {},
            "propertyFilterConstraints": {
              "flavour_id": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "value": "simple"
                      }
                    ],
                    "location": "37,5",
                    "name": "equal",
                    "path": "topology_template.substitution_mappings[\"substitution_filter\"].substitution_filter.properties[0]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                  }
                }
              ]
            }
          }
        ],
        "type": "cci.nodes.Firewall",
        "typeMetadata": {}
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "forwarder",
            "capabilityName": "protected_forwarder"
          },
          "targetID": "_1a8ttJZXIp5KZdza6foBa6ISKxw"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "forwarder",
            "capabilityName": "unprotected_forwarder"
          },
          "targetID": "_1a8ttKKqPdOpmPYxQbwZJIRFznE"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "link",
            "requirementName": "protected_network"
          },
          "targetID": "_1a8ttJZXIp5KZdza6foBa6ISKxw"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "link",
            "requirementName": "unprotected_network"
          },
          "targetID": "_1a8ttKKqPdOpmPYxQbwZJIRFznE"
        }
      ]
    },
    "_1a8ttFCZYcQ1EQowDxf2GMoRWeK": {
      "metadata": {
        "puccini-tosca": {
          "kind": "substitution",
          "version": "1.0"
        }
      },
      "properties": {
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "",
            "value": "192.168.20.0/24"
          },
          "network_name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_network"
          },
          "region_name": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "13,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/network_service.yaml"
            }
          }
        },
        "substitutionFilter": [],
        "type": "cci.nodes.Network",
        "typeMetadata": {}
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "link",
            "capabilityName": "link"
          },
          "targetID": "_1a8ttKVb0brZCMhSi6zw52y2tCD"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "route_target",
            "capabilityName": "route_target"
          },
          "targetID": "_1a8ttKex2qOqbRuPmB1rTPlApqE"
        }
      ]
    },
    "_1a8ttFhWM7Z9eQ1fMlbRtbHDz1O": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/vpp_route/create.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Static route configured on a linux host",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "common/artifacts/run_remote.sh",
                "inputs": {
                  "destination_network": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "destination"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cidr"
                        }
                      ],
                      "location": "38,17",
                      "name": "get_property",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"destination_network\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "gateway_ip": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "gateway"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "ip_address"
                        }
                      ],
                      "location": "41,17",
                      "name": "get_attribute",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"gateway_ip\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "host_ip_address": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "router"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "public_address"
                        }
                      ],
                      "location": "35,17",
                      "name": "get_attribute",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"host_ip_address\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "149,17",
                      "name": "get_artifact",
                      "path": "topology_template.node_templates[\"linux_route\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.linux_route",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.pg",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Router",
            "name": "router",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[1]",
            "relationship": null
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Forwarder",
            "name": "gateway",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.unprotected_port",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Port",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[2]",
            "relationship": null
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.RouteTarget",
            "name": "destination",
            "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.subnet",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Subnet",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[3]",
            "relationship": null
          }
        ],
        "types": {
          "cci.nodes.LinuxRoute": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKOLEvnXy3bZvEDUnkh3iVj"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "router",
            "description": "",
            "interfaces": {},
            "name": "router",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "forwarder",
            "description": "",
            "interfaces": {},
            "name": "gateway",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttKKqPdOpmPYxQbwZJIRFznE"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "route_target",
            "description": "",
            "interfaces": {},
            "name": "destination",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttLlZVbyBeWQO8VR1dAVJlSu"
        }
      ]
    },
    "_1a8ttGFZ4gml6z1plLbPchrAO6J": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "networks": {
            "constraints": [],
            "description": "The list of logical networks assigned to the compute host instance and information about them.",
            "value": null
          },
          "password": {
            "constraints": [],
            "description": "",
            "value": null
          },
          "ports": {
            "constraints": [],
            "description": "The list of logical ports assigned to the compute host instance and information about them.",
            "value": null
          },
          "private_address": {
            "constraints": [],
            "description": "The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "public_address": {
            "constraints": [],
            "description": "The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "binding": {
            "attributes": {},
            "description": "A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Bindable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.14",
                  "normative": "true"
                }
              }
            }
          },
          "endpoint": {
            "attributes": {
              "ip_address": {
                "constraints": [],
                "description": "Note: This is the IP address as propagated up by the associated node's host (Compute) container.",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "public_address"
                    }
                  ],
                  "location": "107,13",
                  "name": "get_attribute",
                  "path": "topology_template.node_templates[\"packet_sink_host\"].capabilities[\"endpoint\"].attributes[\"ip_address\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                }
              }
            },
            "description": "This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "initiator": {
                "constraints": [],
                "description": "The optional indicator of the direction of the connection.",
                "value": "source"
              },
              "network_name": {
                "constraints": [],
                "description": "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC | \u003cnetwork_name\u003e | \u003cnetwork_id\u003e.",
                "value": "PRIVATE"
              },
              "port": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": 65535
                        }
                      ],
                      "location": "107,13",
                      "name": "in_range",
                      "path": "topology_template.node_templates[\"packet_sink_host\"].capabilities[\"endpoint\"].attributes[\"ip_address\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                ],
                "description": "The optional port of the endpoint.",
                "value": 22
              },
              "protocol": {
                "constraints": [],
                "description": "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http, https, ftp, tcp, udp, etc.",
                "value": "ssh"
              },
              "secure": {
                "constraints": [],
                "description": "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.",
                "value": true
              }
            },
            "types": {
              "tosca.capabilities.Endpoint": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.7",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Endpoint.Admin": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.9",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Compute capability, when included on a Node Type or Template definition, indicates that the node can provide hosting on a named compute resource.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "disk_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "112,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_sink_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of the local disk available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 20000000000,
                  "$string": "20000000000 B",
                  "originalString": "20 GB",
                  "scalar": 20,
                  "unit": "GB"
                }
              },
              "mem_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "112,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_sink_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of memory available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 4294967296,
                  "$string": "4294967296 B",
                  "originalString": "4096 MiB",
                  "scalar": 4096,
                  "unit": "MiB"
                }
              },
              "num_cpus": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        }
                      ],
                      "location": "112,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_sink_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                ],
                "description": "Number of (actual or virtual) CPUs associated with the Compute node.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Compute": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "os": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express an Operating System capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "architecture": {
                "constraints": [],
                "description": "The Operating System (OS) architecture. Examples of valid values include: x86_32, x86_64, etc.",
                "value": "x86_64"
              },
              "distribution": {
                "constraints": [],
                "description": "The Operating System (OS) distribution. Examples of valid values for a \"type\" of \"Linux\" would include: debian, fedora, rhel and ubuntu.",
                "value": "ubuntu"
              },
              "type": {
                "constraints": [],
                "description": "The Operating System (OS) type. Examples of valid values include: linux, aix, mac, windows, etc.",
                "value": "linux"
              },
              "version": {
                "constraints": [],
                "description": "The Operating System version.",
                "value": {
                  "$string": "18.04",
                  "build": 0,
                  "fix": 0,
                  "major": 18,
                  "minor": 4,
                  "originalString": "18.04",
                  "qualifier": ""
                }
              }
            },
            "types": {
              "tosca.capabilities.OperatingSystem": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.12",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "scalable": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express a scalability capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "max_instances": {
                "constraints": [],
                "description": "This property is used to indicate the maximum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              },
              "min_instances": {
                "constraints": [],
                "description": "This property is used to indicate the minimum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Scalable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.13",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Openstack Compute node",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "80,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "86,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "89,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "83,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/compute/create.sh",
                "inputs": {
                  "architecture": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "architecture"
                        }
                      ],
                      "location": "110,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"architecture\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "cpu_frequency": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cpu_frequency"
                        }
                      ],
                      "location": "101,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"cpu_frequency\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "disk_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "disk_size"
                        }
                      ],
                      "location": "104,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"disk_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "distribution": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "distribution"
                        }
                      ],
                      "location": "116,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"distribution\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "mem_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "mem_size"
                        }
                      ],
                      "location": "107,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"mem_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "num_cpus": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "num_cpus"
                        }
                      ],
                      "location": "98,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"num_cpus\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "server_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "95,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"server_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "type": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "type"
                        }
                      ],
                      "location": "113,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"type\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "version": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "version"
                        }
                      ],
                      "location": "119,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"version\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "adminPass": {
                    "attributeName": "password",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host"
                  },
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/compute/delete.sh",
                "inputs": {
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "138,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/compute/start.sh",
                "inputs": {
                  "server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "129,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "accessIPv4": {
                    "attributeName": "public_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host"
                  }
                },
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "packet_sink"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "cloud",
            "nodeTemplateName": "",
            "nodeTemplatePropertyConstraints": {
              "region_name": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "map": {
                          "get_input": {
                            "constraints": [],
                            "description": "",
                            "value": "region_name"
                          }
                        }
                      }
                    ],
                    "location": "100,11",
                    "name": "equal",
                    "path": "topology_template.node_templates[\"packet_sink_host\"].requirements[0].relationship.interfaces[\"tosca_id\"]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                  }
                }
              ]
            },
            "nodeTypeName": "os.nodes.Cloud",
            "path": "topology_template.node_templates[\"packet_sink_host\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Compute": {
            "metadata": {}
          },
          "tosca.nodes.Abstract.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.2",
              "normative": "true"
            }
          },
          "tosca.nodes.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.3",
              "normative": "true"
            }
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttGMXDujnydIRxXR45Lhv4jo": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "networks": {
            "constraints": [],
            "description": "The list of logical networks assigned to the compute host instance and information about them.",
            "value": null
          },
          "password": {
            "constraints": [],
            "description": "",
            "value": null
          },
          "ports": {
            "constraints": [],
            "description": "The list of logical ports assigned to the compute host instance and information about them.",
            "value": null
          },
          "private_address": {
            "constraints": [],
            "description": "The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "public_address": {
            "constraints": [],
            "description": "The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "binding": {
            "attributes": {},
            "description": "A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Bindable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.14",
                  "normative": "true"
                }
              }
            }
          },
          "endpoint": {
            "attributes": {
              "ip_address": {
                "constraints": [],
                "description": "Note: This is the IP address as propagated up by the associated node's host (Compute) container.",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "public_address"
                    }
                  ],
                  "location": "95,13",
                  "name": "get_attribute",
                  "path": "topology_template.node_templates[\"firewall_host\"].capabilities[\"endpoint\"].attributes[\"ip_address\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                }
              }
            },
            "description": "This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "initiator": {
                "constraints": [],
                "description": "The optional indicator of the direction of the connection.",
                "value": "source"
              },
              "network_name": {
                "constraints": [],
                "description": "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC | \u003cnetwork_name\u003e | \u003cnetwork_id\u003e.",
                "value": "PRIVATE"
              },
              "port": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": 65535
                        }
                      ],
                      "location": "95,13",
                      "name": "in_range",
                      "path": "topology_template.node_templates[\"firewall_host\"].capabilities[\"endpoint\"].attributes[\"ip_address\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                ],
                "description": "The optional port of the endpoint.",
                "value": 22
              },
              "protocol": {
                "constraints": [],
                "description": "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http, https, ftp, tcp, udp, etc.",
                "value": "ssh"
              },
              "secure": {
                "constraints": [],
                "description": "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.",
                "value": true
              }
            },
            "types": {
              "tosca.capabilities.Endpoint": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.7",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Endpoint.Admin": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.9",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Compute capability, when included on a Node Type or Template definition, indicates that the node can provide hosting on a named compute resource.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "disk_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "100,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"firewall_host\"].capabilities[\"host\"].attributes[\"disk_size\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of the local disk available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 20000000000,
                  "$string": "20000000000 B",
                  "originalString": "20 GB",
                  "scalar": 20,
                  "unit": "GB"
                }
              },
              "mem_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "100,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"firewall_host\"].capabilities[\"host\"].attributes[\"disk_size\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of memory available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 4294967296,
                  "$string": "4294967296 B",
                  "originalString": "4096 MiB",
                  "scalar": 4096,
                  "unit": "MiB"
                }
              },
              "num_cpus": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        }
                      ],
                      "location": "100,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"firewall_host\"].capabilities[\"host\"].attributes[\"disk_size\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                ],
                "description": "Number of (actual or virtual) CPUs associated with the Compute node.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Compute": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "os": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express an Operating System capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "architecture": {
                "constraints": [],
                "description": "The Operating System (OS) architecture. Examples of valid values include: x86_32, x86_64, etc.",
                "value": "x86_64"
              },
              "distribution": {
                "constraints": [],
                "description": "The Operating System (OS) distribution. Examples of valid values for a \"type\" of \"Linux\" would include: debian, fedora, rhel and ubuntu.",
                "value": "ubuntu"
              },
              "type": {
                "constraints": [],
                "description": "The Operating System (OS) type. Examples of valid values include: linux, aix, mac, windows, etc.",
                "value": "linux"
              },
              "version": {
                "constraints": [],
                "description": "The Operating System version.",
                "value": {
                  "$string": "18.04",
                  "build": 0,
                  "fix": 0,
                  "major": 18,
                  "minor": 4,
                  "originalString": "18.04",
                  "qualifier": ""
                }
              }
            },
            "types": {
              "tosca.capabilities.OperatingSystem": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.12",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "scalable": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express a scalability capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "max_instances": {
                "constraints": [],
                "description": "This property is used to indicate the maximum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              },
              "min_instances": {
                "constraints": [],
                "description": "This property is used to indicate the minimum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Scalable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.13",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Openstack Compute node",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "80,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "86,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "89,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "83,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/compute/create.sh",
                "inputs": {
                  "architecture": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "architecture"
                        }
                      ],
                      "location": "110,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"architecture\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "cpu_frequency": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cpu_frequency"
                        }
                      ],
                      "location": "101,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"cpu_frequency\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "disk_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "disk_size"
                        }
                      ],
                      "location": "104,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"disk_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "distribution": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "distribution"
                        }
                      ],
                      "location": "116,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"distribution\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "mem_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "mem_size"
                        }
                      ],
                      "location": "107,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"mem_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "num_cpus": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "num_cpus"
                        }
                      ],
                      "location": "98,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"num_cpus\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "server_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "95,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"server_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "type": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "type"
                        }
                      ],
                      "location": "113,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"type\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "version": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "version"
                        }
                      ],
                      "location": "119,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"version\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "adminPass": {
                    "attributeName": "password",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host"
                  },
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/compute/delete.sh",
                "inputs": {
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "138,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/compute/start.sh",
                "inputs": {
                  "server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "129,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "accessIPv4": {
                    "attributeName": "public_address",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host"
                  }
                },
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "firewall"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "cloud",
            "nodeTemplateName": "",
            "nodeTemplatePropertyConstraints": {
              "region_name": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "map": {
                          "get_input": {
                            "constraints": [],
                            "description": "",
                            "value": "region_name"
                          }
                        }
                      }
                    ],
                    "location": "88,11",
                    "name": "equal",
                    "path": "topology_template.node_templates[\"firewall_host\"].requirements[0].relationship.interfaces[\"tosca_id\"]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                  }
                }
              ]
            },
            "nodeTypeName": "os.nodes.Cloud",
            "path": "topology_template.node_templates[\"firewall_host\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Compute": {
            "metadata": {}
          },
          "tosca.nodes.Abstract.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.2",
              "normative": "true"
            }
          },
          "tosca.nodes.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.3",
              "normative": "true"
            }
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttGNKTSRo1vneaC8creDq9Un": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "networks": {
            "constraints": [],
            "description": "The list of logical networks assigned to the compute host instance and information about them.",
            "value": null
          },
          "password": {
            "constraints": [],
            "description": "",
            "value": null
          },
          "ports": {
            "constraints": [],
            "description": "The list of logical ports assigned to the compute host instance and information about them.",
            "value": null
          },
          "private_address": {
            "constraints": [],
            "description": "The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "public_address": {
            "constraints": [],
            "description": "The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.",
            "value": null
          },
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "binding": {
            "attributes": {},
            "description": "A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Bindable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.14",
                  "normative": "true"
                }
              }
            }
          },
          "endpoint": {
            "attributes": {
              "ip_address": {
                "constraints": [],
                "description": "Note: This is the IP address as propagated up by the associated node's host (Compute) container.",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "public_address"
                    }
                  ],
                  "location": "174,13",
                  "name": "get_attribute",
                  "path": "topology_template.node_templates[\"packet_generator_host\"].capabilities[\"endpoint\"].attributes[\"ip_address\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                }
              }
            },
            "description": "This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "initiator": {
                "constraints": [],
                "description": "The optional indicator of the direction of the connection.",
                "value": "source"
              },
              "network_name": {
                "constraints": [],
                "description": "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC | \u003cnetwork_name\u003e | \u003cnetwork_id\u003e.",
                "value": "PRIVATE"
              },
              "port": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": 65535
                        }
                      ],
                      "location": "173,11",
                      "name": "in_range",
                      "path": "topology_template.node_templates[\"packet_generator_host\"].capabilities[\"endpoint\"].attributes[\"port\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                ],
                "description": "The optional port of the endpoint.",
                "value": 22
              },
              "protocol": {
                "constraints": [],
                "description": "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http, https, ftp, tcp, udp, etc.",
                "value": "ssh"
              },
              "secure": {
                "constraints": [],
                "description": "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.",
                "value": true
              }
            },
            "types": {
              "tosca.capabilities.Endpoint": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.7",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Endpoint.Admin": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.9",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Compute capability, when included on a Node Type or Template definition, indicates that the node can provide hosting on a named compute resource.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "disk_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "179,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_generator_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of the local disk available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 20000000000,
                  "$string": "20000000000 B",
                  "originalString": "20 GB",
                  "scalar": 20,
                  "unit": "GB"
                }
              },
              "mem_size": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": {
                            "$number": 0,
                            "$string": "0 B",
                            "originalString": "0 MB",
                            "scalar": 0,
                            "unit": "MB"
                          }
                        }
                      ],
                      "location": "179,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_generator_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                ],
                "description": "Size of memory available to applications running on the Compute node (default unit is MB).",
                "value": {
                  "$number": 4294967296,
                  "$string": "4294967296 B",
                  "originalString": "4096 MiB",
                  "scalar": 4096,
                  "unit": "MiB"
                }
              },
              "num_cpus": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": 1
                        }
                      ],
                      "location": "179,9",
                      "name": "greater_or_equal",
                      "path": "topology_template.node_templates[\"packet_generator_host\"].capabilities[\"host\"].attributes[\"num_cpus\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                ],
                "description": "Number of (actual or virtual) CPUs associated with the Compute node.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Compute": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "os": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express an Operating System capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "architecture": {
                "constraints": [],
                "description": "The Operating System (OS) architecture. Examples of valid values include: x86_32, x86_64, etc.",
                "value": "x86_64"
              },
              "distribution": {
                "constraints": [],
                "description": "The Operating System (OS) distribution. Examples of valid values for a \"type\" of \"Linux\" would include: debian, fedora, rhel and ubuntu.",
                "value": "ubuntu"
              },
              "type": {
                "constraints": [],
                "description": "The Operating System (OS) type. Examples of valid values include: linux, aix, mac, windows, etc.",
                "value": "linux"
              },
              "version": {
                "constraints": [],
                "description": "The Operating System version.",
                "value": {
                  "$string": "18.04",
                  "build": 0,
                  "fix": 0,
                  "major": 18,
                  "minor": 4,
                  "originalString": "18.04",
                  "qualifier": ""
                }
              }
            },
            "types": {
              "tosca.capabilities.OperatingSystem": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.12",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "router": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Router": {
                "metadata": {}
              },
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "scalable": {
            "attributes": {},
            "description": "This is the default TOSCA type that should be used to express a scalability capability for a node.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "max_instances": {
                "constraints": [],
                "description": "This property is used to indicate the maximum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              },
              "min_instances": {
                "constraints": [],
                "description": "This property is used to indicate the minimum number of instances that should be created for the associated TOSCA Node Template by a TOSCA orchestrator.",
                "value": 1
              }
            },
            "types": {
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Scalable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.13",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Openstack Compute node",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "80,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "86,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "89,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "83,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/compute/create.sh",
                "inputs": {
                  "architecture": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "architecture"
                        }
                      ],
                      "location": "110,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"architecture\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "cpu_frequency": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cpu_frequency"
                        }
                      ],
                      "location": "101,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"cpu_frequency\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "disk_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "disk_size"
                        }
                      ],
                      "location": "104,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"disk_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "distribution": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "distribution"
                        }
                      ],
                      "location": "116,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"distribution\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "mem_size": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "mem_size"
                        }
                      ],
                      "location": "107,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"mem_size\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "num_cpus": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "host"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "num_cpus"
                        }
                      ],
                      "location": "98,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"num_cpus\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "server_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "95,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"server_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "type": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "type"
                        }
                      ],
                      "location": "113,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"type\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "version": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "os"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "version"
                        }
                      ],
                      "location": "119,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"version\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "adminPass": {
                    "attributeName": "password",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host"
                  },
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/compute/delete.sh",
                "inputs": {
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "138,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/compute/start.sh",
                "inputs": {
                  "server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "129,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Compute\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "accessIPv4": {
                    "attributeName": "public_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host"
                  }
                },
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "packet_generator"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "cloud",
            "nodeTemplateName": "",
            "nodeTemplatePropertyConstraints": {
              "region_name": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "map": {
                          "get_input": {
                            "constraints": [],
                            "description": "",
                            "value": "region_name"
                          }
                        }
                      }
                    ],
                    "location": "167,11",
                    "name": "equal",
                    "path": "topology_template.node_templates[\"packet_generator_host\"].requirements[0].relationship.interfaces[\"tosca_id\"]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                  }
                }
              ]
            },
            "nodeTypeName": "os.nodes.Cloud",
            "path": "topology_template.node_templates[\"packet_generator_host\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Compute": {
            "metadata": {}
          },
          "tosca.nodes.Abstract.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.2",
              "normative": "true"
            }
          },
          "tosca.nodes.Compute": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.3",
              "normative": "true"
            }
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttGSsgtwHNpBFDFfoUgxCwY6": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/honeycomb/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/honeycomb/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Honeycomb Software",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "263,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "268,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "272,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.honeycomb",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.vpp",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"honeycomb\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"honeycomb\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.Honeycomb": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttIluOI5zwDJXfMQD2RAn6jW"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        }
      ]
    },
    "_1a8ttGyMINCXYaa82Rg8vB74KGp": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "186,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "192,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_project_id": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "project_id"
                    }
                  ],
                  "location": "198,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_project_id\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "195,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "189,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/port/create.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "link"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "204,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "207,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port"
                  },
                  "ip_address": {
                    "attributeName": "ip_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port"
                  },
                  "mac_address": {
                    "attributeName": "mac_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/port/delete.sh",
                "inputs": {
                  "os_port_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "221,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_port_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "218,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "protected_packet_sink_port"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Bindable",
            "name": "binding",
            "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"protected_port\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network association relationship between Port and Compute node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.BindsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.5",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "link",
            "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"protected_port\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Port": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "binding",
            "description": "This type represents a network association relationship between Port and Compute node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "binding",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.BindsTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.5",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGFZ4gml6z1plLbPchrAO6J"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "link",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttHTorHfe7yU0O4sppixowIO"
        }
      ]
    },
    "_1a8ttHEqmYsCRhlnehoQPKLnifv": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/ves/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/ves/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "VES Software",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "237,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.VES\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "242,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VES\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "246,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VES\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  },
                  "ves_collector_ip": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "ves_collector_ip"
                        }
                      ],
                      "location": "247,15",
                      "name": "get_property",
                      "path": "node_types[\"cci.nodes.VES\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"ves_collector_ip\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  },
                  "ves_collector_port": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "ves_collector_port"
                        }
                      ],
                      "location": "248,15",
                      "name": "get_property",
                      "path": "node_types[\"cci.nodes.VES\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"ves_collector_port\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.ves",
        "properties": {
          "ves_collector_ip": {
            "constraints": [],
            "description": "IP address of the collector",
            "value": "1.2.3.4"
          },
          "ves_collector_port": {
            "constraints": [],
            "description": "IP port of the collector",
            "value": 3904
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"ves\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"ves\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.VES": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttHlvfdwtpiOts2zlEkE0nTb"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        }
      ]
    },
    "_1a8ttHTorHfe7yU0O4sppixowIO": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "link": {
            "attributes": {},
            "description": "A node type that includes the Linkable capability indicates that it can be pointed by tosca.relationships.network.LinksTo relationship type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Linkable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.3",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "254,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "260,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "263,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "257,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/network/create.sh",
                "inputs": {
                  "os_network_admin_state_up": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "admin_state_up"
                        }
                      ],
                      "location": "272,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_admin_state_up\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_network_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "269,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.network"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/network/delete.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "281,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "protected_network.firewall__flavors__network_service.yaml.network",
        "properties": {
          "admin_state_up": {
            "constraints": [],
            "description": "",
            "value": true
          },
          "name": {
            "constraints": [],
            "description": "",
            "value": "protected_network"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "cloud",
            "nodeTemplateName": "",
            "nodeTemplatePropertyConstraints": {
              "region_name": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "map": {
                          "get_input": {
                            "constraints": [],
                            "description": "",
                            "value": "region_name"
                          }
                        }
                      }
                    ],
                    "location": "49,11",
                    "name": "equal",
                    "path": "topology_template.node_templates[\"network\"].requirements[0].relationship.interfaces[\"tosca_id\"]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/network_service.yaml"
                  }
                }
              ]
            },
            "nodeTypeName": "os.nodes.Cloud",
            "path": "topology_template.node_templates[\"network\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Network": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttHbJgHxcA4DlO79QH4m8Eon": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "186,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "192,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_project_id": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "project_id"
                    }
                  ],
                  "location": "198,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_project_id\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "195,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "189,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/port/create.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "link"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "204,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "207,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.unprotected_port"
                  },
                  "ip_address": {
                    "attributeName": "ip_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.unprotected_port"
                  },
                  "mac_address": {
                    "attributeName": "mac_address",
                    "capabilityName": "",
                    "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.unprotected_port"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/port/delete.sh",
                "inputs": {
                  "os_port_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "221,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_port_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "218,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.unprotected_port",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_packet_generator_port"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Bindable",
            "name": "binding",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"unprotected_port\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network association relationship between Port and Compute node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.BindsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.5",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "link",
            "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"unprotected_port\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Port": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "binding",
            "description": "This type represents a network association relationship between Port and Compute node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "binding",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.BindsTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.5",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "link",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKVb0brZCMhSi6zw52y2tCD"
        }
      ]
    },
    "_1a8ttHjtWqnGdAgynhoH8FWHYdv": {
      "metadata": {
        "puccini-tosca": {
          "kind": "substitution",
          "version": "1.0"
        }
      },
      "properties": {
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "",
            "value": "192.168.10.0/24"
          },
          "network_name": {
            "constraints": [],
            "description": "",
            "value": "protected_network"
          },
          "region_name": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "13,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/network_service.yaml"
            }
          }
        },
        "substitutionFilter": [],
        "type": "cci.nodes.Network",
        "typeMetadata": {}
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "link",
            "capabilityName": "link"
          },
          "targetID": "_1a8ttHTorHfe7yU0O4sppixowIO"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "route_target",
            "capabilityName": "route_target"
          },
          "targetID": "_1a8ttLlZVbyBeWQO8VR1dAVJlSu"
        }
      ]
    },
    "_1a8ttHlvfdwtpiOts2zlEkE0nTb": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "config": {
            "description": "",
            "properties": {},
            "sourcePath": "firewall/artifacts/firewall/config.sh",
            "targetPath": "",
            "types": {}
          },
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "firewall/artifacts/firewall/create.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "22,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.FirewallSoftware\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "common/artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "config"
                        }
                      ],
                      "location": "31,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.FirewallSoftware\"].interfaces[\"Standard\"].operations[\"configure\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "common/artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "27,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.FirewallSoftware\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/firewall_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.firewall",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.honeycomb",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"firewall\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"firewall\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.FirewallSoftware": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGSsgtwHNpBFDFfoUgxCwY6"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        }
      ]
    },
    "_1a8ttHvXo4p42Za6RbXoF8seRo8": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/vpp/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/vpp/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "VPP Software",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "287,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "291,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "295,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.vpp",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"vpp\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.VPP": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        }
      ]
    },
    "_1a8ttIluOI5zwDJXfMQD2RAn6jW": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/vpp/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/vpp/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "VPP Software",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "287,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "291,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "295,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.VPP\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.vpp",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"vpp\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.VPP": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        }
      ]
    },
    "_1a8ttJZXIp5KZdza6foBa6ISKxw": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "186,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "192,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_project_id": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "project_id"
                    }
                  ],
                  "location": "198,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_project_id\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "195,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "189,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/port/create.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "link"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "204,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "207,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.protected_port"
                  },
                  "ip_address": {
                    "attributeName": "ip_address",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.protected_port"
                  },
                  "mac_address": {
                    "attributeName": "mac_address",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.protected_port"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/port/delete.sh",
                "inputs": {
                  "os_port_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "221,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_port_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "218,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.protected_port",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "protected_firewall_port"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Bindable",
            "name": "binding",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"protected_port\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network association relationship between Port and Compute node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.BindsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.5",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "link",
            "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"protected_port\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Port": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "binding",
            "description": "This type represents a network association relationship between Port and Compute node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "binding",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.BindsTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.5",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "link",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttHTorHfe7yU0O4sppixowIO"
        }
      ]
    },
    "_1a8ttK28pdBKNGW2uvwv3C1YxPf": {
      "metadata": {
        "puccini-tosca": {
          "kind": "substitution",
          "version": "1.0"
        }
      },
      "properties": {
        "properties": {
          "region_name": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "51,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
            }
          }
        },
        "substitutionFilter": [
          {
            "capabilityPropertyConstraints": {},
            "propertyFilterConstraints": {
              "flavour_id": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "value": "simple"
                      }
                    ],
                    "location": "48,5",
                    "name": "equal",
                    "path": "topology_template.substitution_mappings[\"substitution_filter\"].substitution_filter.properties[0]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                  }
                }
              ]
            }
          }
        ],
        "type": "cci.nodes.PacketSink",
        "typeMetadata": {}
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "router",
            "capabilityName": "router"
          },
          "targetID": "_1a8ttGFZ4gml6z1plLbPchrAO6J"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "sink",
            "capabilityName": "sink"
          },
          "targetID": "_1a8ttMIUKnL8zUINFsBWEVVeRs6"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "link",
            "requirementName": "protected_network"
          },
          "targetID": "_1a8ttGyMINCXYaa82Rg8vB74KGp"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "destination",
            "requirementName": "destination"
          },
          "targetID": "_1a8ttKUH2JsWTPNjSXJNKYwFaNd"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "gateway",
            "requirementName": "gateway"
          },
          "targetID": "_1a8ttKUH2JsWTPNjSXJNKYwFaNd"
        }
      ]
    },
    "_1a8ttKKqPdOpmPYxQbwZJIRFznE": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "forwarder": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.Forwarder": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "186,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "192,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_project_id": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "project_id"
                    }
                  ],
                  "location": "198,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_project_id\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "195,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "binding"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "189,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/port/create.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "link"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "204,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "207,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.unprotected_port"
                  },
                  "ip_address": {
                    "attributeName": "ip_address",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.unprotected_port"
                  },
                  "mac_address": {
                    "attributeName": "mac_address",
                    "capabilityName": "",
                    "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.unprotected_port"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/port/delete.sh",
                "inputs": {
                  "os_port_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "221,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_port_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_server_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "binding"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "218,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Port\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_server_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "firewall.firewall__flavors__firewall_function_service.yaml.unprotected_port",
        "properties": {
          "name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_firewall_port"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Bindable",
            "name": "binding",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.firewall_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"unprotected_port\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network association relationship between Port and Compute node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.BindsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.5",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.network.Linkable",
            "name": "link",
            "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"unprotected_port\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This relationship type represents an association relationship between Port and Network node types.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                },
                "tosca.relationships.network.LinksTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "8.5.4",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Port": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "binding",
            "description": "This type represents a network association relationship between Port and Compute node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "binding",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.BindsTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.5",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGMXDujnydIRxXR45Lhv4jo"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "link",
            "description": "This relationship type represents an association relationship between Port and Network node types.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "link",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              },
              "tosca.relationships.network.LinksTo": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.4",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKVb0brZCMhSi6zw52y2tCD"
        }
      ]
    },
    "_1a8ttKOLEvnXy3bZvEDUnkh3iVj": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "config": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/packet_generator/config.sh",
            "targetPath": "",
            "types": {}
          },
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/packet_generator/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/packet_generator/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "31,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.PacketGeneratorSoftware\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "config"
                        }
                      ],
                      "location": "44,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketGeneratorSoftware\"].interfaces[\"Standard\"].operations[\"configure\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  },
                  "sink_ip_address": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "target"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "sink"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "ip_address"
                        }
                      ],
                      "location": "43,17",
                      "name": "get_attribute",
                      "path": "node_types[\"cci.nodes.PacketGeneratorSoftware\"].interfaces[\"Standard\"].operations[\"configure\"].inputs[\"sink_ip_address\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "36,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketGeneratorSoftware\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "47,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketGeneratorSoftware\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.pg",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.vpp",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"pg\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"pg\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Endpoint",
            "name": "target",
            "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_software",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "cci.nodes.PacketSink",
            "path": "topology_template.node_templates[\"pg\"].requirements[2]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a network connection relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.ConnectsTo": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.4",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.PacketGeneratorSoftware": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttHvXo4p42Za6RbXoF8seRo8"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        }
      ]
    },
    "_1a8ttKUH2JsWTPNjSXJNKYwFaNd": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/standard_route/create.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Static route configured on a linux host",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "common/artifacts/run_remote.sh",
                "inputs": {
                  "destination_network": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "destination"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cidr"
                        }
                      ],
                      "location": "38,17",
                      "name": "get_property",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"destination_network\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "gateway_ip": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "gateway"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "ip_address"
                        }
                      ],
                      "location": "41,17",
                      "name": "get_attribute",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"gateway_ip\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "host_ip_address": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "router"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "public_address"
                        }
                      ],
                      "location": "35,17",
                      "name": "get_attribute",
                      "path": "node_types[\"cci.nodes.LinuxRoute\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"host_ip_address\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/types/routing.yaml"
                    }
                  },
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "93,17",
                      "name": "get_artifact",
                      "path": "topology_template.node_templates[\"linux_route\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.linux_route",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Router",
            "name": "router",
            "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Compute",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[0]",
            "relationship": null
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.RouteTarget",
            "name": "destination",
            "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.subnet",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Subnet",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[1]",
            "relationship": null
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "cci.capabilities.Forwarder",
            "name": "gateway",
            "nodeTemplateName": "firewall.firewall__flavors__firewall_function_service.yaml.protected_port",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Port",
            "path": "topology_template.node_templates[\"linux_route\"].requirements[2]",
            "relationship": null
          }
        ],
        "types": {
          "cci.nodes.LinuxRoute": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "router",
            "description": "",
            "interfaces": {},
            "name": "router",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttGFZ4gml6z1plLbPchrAO6J"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "route_target",
            "description": "",
            "interfaces": {},
            "name": "destination",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttKex2qOqbRuPmB1rTPlApqE"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {},
            "capability": "forwarder",
            "description": "",
            "interfaces": {},
            "name": "gateway",
            "properties": {},
            "types": {}
          },
          "targetID": "_1a8ttJZXIp5KZdza6foBa6ISKxw"
        }
      ]
    },
    "_1a8ttKVb0brZCMhSi6zw52y2tCD": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "host": {
            "attributes": {},
            "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Container": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.6",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "link": {
            "attributes": {},
            "description": "A node type that includes the Linkable capability indicates that it can be pointed by tosca.relationships.network.LinksTo relationship type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              },
              "tosca.capabilities.network.Linkable": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "8.5.3",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "254,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "260,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "263,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "257,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/network/create.sh",
                "inputs": {
                  "os_network_admin_state_up": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "admin_state_up"
                        }
                      ],
                      "location": "272,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_admin_state_up\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_network_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "269,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_network_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.network"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/network/delete.sh",
                "inputs": {
                  "os_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "281,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Network\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "unprotected_network.firewall__flavors__network_service.yaml.network",
        "properties": {
          "admin_state_up": {
            "constraints": [],
            "description": "",
            "value": true
          },
          "name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_network"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "cloud",
            "nodeTemplateName": "",
            "nodeTemplatePropertyConstraints": {
              "region_name": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "map": {
                          "get_input": {
                            "constraints": [],
                            "description": "",
                            "value": "region_name"
                          }
                        }
                      }
                    ],
                    "location": "49,11",
                    "name": "equal",
                    "path": "topology_template.node_templates[\"network\"].requirements[0].relationship.interfaces[\"tosca_id\"]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/network_service.yaml"
                  }
                }
              ]
            },
            "nodeTypeName": "os.nodes.Cloud",
            "path": "topology_template.node_templates[\"network\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Network": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": []
    },
    "_1a8ttKex2qOqbRuPmB1rTPlApqE": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "route_target": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.RouteTarget": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "317,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "323,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "326,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "320,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/subnet/create.sh",
                "inputs": {
                  "os_subnet_cidr": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cidr"
                        }
                      ],
                      "location": "335,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_cidr\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_enable_dhcp": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "enable_dhcp"
                        }
                      ],
                      "location": "338,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_enable_dhcp\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "332,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "network"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "341,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.subnet"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/subnet/delete.sh",
                "inputs": {
                  "os_subnet_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "350,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_subnet_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "unprotected_network.firewall__flavors__network_service.yaml.subnet",
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "",
            "value": "192.168.20.0/24"
          },
          "enable_dhcp": {
            "constraints": [],
            "description": "",
            "value": true
          },
          "name": {
            "constraints": [],
            "description": "",
            "value": "unprotected_network"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "network",
            "nodeTemplateName": "unprotected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"subnet\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Subnet": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "network",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKVb0brZCMhSi6zw52y2tCD"
        }
      ]
    },
    "_1a8ttKoYKl4oQFcgaXhLMk7H0uu": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/honeycomb/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/honeycomb/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "Honeycomb Software",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "263,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "268,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "272,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.Honeycomb\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/cci.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.honeycomb",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.linux_route",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"honeycomb\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"honeycomb\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.Honeycomb": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttFhWM7Z9eQ1fMlbRtbHDz1O"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        }
      ]
    },
    "_1a8ttLONg2PQmxOX8BCOFfIhDTS": {
      "metadata": {
        "puccini-tosca": {
          "kind": "substitution",
          "version": "1.0"
        }
      },
      "properties": {
        "properties": {
          "num_streams": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "num_streams"
                }
              ],
              "location": "99,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"num_streams\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
            }
          },
          "region_name": {
            "constraints": [],
            "description": "",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "region_name"
                }
              ],
              "location": "99,5",
              "name": "get_input",
              "path": "topology_template.substitution_mappings[\"properties\"].properties[\"region_name\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
            }
          }
        },
        "substitutionFilter": [
          {
            "capabilityPropertyConstraints": {},
            "propertyFilterConstraints": {
              "flavour_id": [
                {
                  "constraints": [],
                  "description": "",
                  "functionCall": {
                    "arguments": [
                      {
                        "constraints": [],
                        "description": "",
                        "value": "simple"
                      }
                    ],
                    "location": "96,5",
                    "name": "equal",
                    "path": "topology_template.substitution_mappings[\"substitution_filter\"].substitution_filter.properties[0]",
                    "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                  }
                }
              ]
            }
          }
        ],
        "type": "cci.nodes.PacketGenerator",
        "typeMetadata": {}
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "capabilityMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "capability": "router",
            "capabilityName": "router"
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "destination",
            "requirementName": "destination"
          },
          "targetID": "_1a8ttFhWM7Z9eQ1fMlbRtbHDz1O"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "gateway",
            "requirementName": "gateway"
          },
          "targetID": "_1a8ttFhWM7Z9eQ1fMlbRtbHDz1O"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "link",
            "requirementName": "unprotected_network"
          },
          "targetID": "_1a8ttHbJgHxcA4DlO79QH4m8Eon"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "requirementMapping",
              "version": "1.0"
            }
          },
          "properties": {
            "requirement": "target",
            "requirementName": "target"
          },
          "targetID": "_1a8ttKOLEvnXy3bZvEDUnkh3iVj"
        }
      ]
    },
    "_1a8ttLa944pKeUWC3s6cjfvcXT8": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/demo/create.sh",
            "targetPath": "",
            "types": {}
          },
          "modify": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/demo/modify.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/demo/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {},
        "capabilities": {},
        "description": "Root type from which other CCI types derive",
        "directives": [],
        "interfaces": {
          "Standard": {
            "description": "This interface type adds a 'modify' operation to the standard lifecycle management interface.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "76,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.FirewallDemo\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "81,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.FirewallDemo\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "modify": {
                "dependencies": [],
                "description": "operation to modify a deployed node",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "num_streams": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "num_streams"
                        }
                      ],
                      "location": "90,15",
                      "name": "get_property",
                      "path": "node_types[\"cci.nodes.FirewallDemo\"].interfaces[\"Standard\"].operations[\"modify\"].inputs[\"num_streams\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  },
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "modify"
                        }
                      ],
                      "location": "89,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.FirewallDemo\"].interfaces[\"Standard\"].operations[\"modify\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "85,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.FirewallDemo\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "cci.interfaces.node.lifecycle.Standard": {
                "metadata": {}
              },
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.demo",
        "properties": {
          "num_streams": {
            "constraints": [
              {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": 1
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": 10
                    }
                  ],
                  "location": "125,9",
                  "name": "in_range",
                  "path": "topology_template.node_templates[\"demo\"].properties[\"num_streams\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
                }
              }
            ],
            "description": "Requested packet volume expressed in number of packets received per 10 second interval.",
            "functionCall": {
              "arguments": [
                {
                  "constraints": [],
                  "description": "",
                  "value": "num_streams"
                }
              ],
              "location": "125,9",
              "name": "get_input",
              "path": "topology_template.node_templates[\"demo\"].properties[\"num_streams\"]",
              "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_generator_function_service.yaml"
            }
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.honeycomb",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"demo\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "packet_generator.firewall__flavors__packet_generator_function_service.yaml.packet_generator_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"demo\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.FirewallDemo": {
            "metadata": {}
          },
          "cci.nodes.Root": {
            "metadata": {}
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKoYKl4oQFcgaXhLMk7H0uu"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGNKTSRo1vneaC8creDq9Un"
        }
      ]
    },
    "_1a8ttLlZVbyBeWQO8VR1dAVJlSu": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {},
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          },
          "uuid": {
            "constraints": [],
            "description": "",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "route_target": {
            "attributes": {},
            "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "cci.capabilities.RouteTarget": {
                "metadata": {}
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "os_auth_url": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "auth_url"
                    }
                  ],
                  "location": "317,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_auth_url\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_password": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "password"
                    }
                  ],
                  "location": "323,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_password\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_region_name": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "region_name"
                    }
                  ],
                  "location": "326,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_region_name\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              },
              "os_username": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "network"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "cloud"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "username"
                    }
                  ],
                  "location": "320,13",
                  "name": "get_property",
                  "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].inputs[\"os_username\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/subnet/create.sh",
                "inputs": {
                  "os_subnet_cidr": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "cidr"
                        }
                      ],
                      "location": "335,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_cidr\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_enable_dhcp": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "enable_dhcp"
                        }
                      ],
                      "location": "338,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_enable_dhcp\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_name": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "name"
                        }
                      ],
                      "location": "332,17",
                      "name": "get_property",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_name\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  },
                  "os_subnet_network_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "network"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "341,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"os_subnet_network_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {
                  "id": {
                    "attributeName": "uuid",
                    "capabilityName": "",
                    "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.subnet"
                  }
                },
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "artifacts/subnet/delete.sh",
                "inputs": {
                  "os_subnet_id": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "uuid"
                        }
                      ],
                      "location": "350,17",
                      "name": "get_attribute",
                      "path": "node_types[\"os.nodes.Subnet\"].interfaces[\"Standard\"].operations[\"delete\"].inputs[\"os_subnet_id\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/common/types/openstack.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "protected_network.firewall__flavors__network_service.yaml.subnet",
        "properties": {
          "cidr": {
            "constraints": [],
            "description": "",
            "value": "192.168.10.0/24"
          },
          "enable_dhcp": {
            "constraints": [],
            "description": "",
            "value": true
          },
          "name": {
            "constraints": [],
            "description": "",
            "value": "protected_network"
          }
        },
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Container",
            "name": "network",
            "nodeTemplateName": "protected_network.firewall__flavors__network_service.yaml.network",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "os.nodes.Network",
            "path": "topology_template.node_templates[\"subnet\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "os.nodes.Subnet": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "network",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttHTorHfe7yU0O4sppixowIO"
        }
      ]
    },
    "_1a8ttMIUKnL8zUINFsBWEVVeRs6": {
      "metadata": {
        "puccini-tosca": {
          "kind": "nodeTemplate",
          "version": "1.0"
        }
      },
      "properties": {
        "artifacts": {
          "config": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/darkstat/config.sh",
            "targetPath": "",
            "types": {}
          },
          "create": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/darkstat/create.sh",
            "targetPath": "",
            "types": {}
          },
          "start": {
            "description": "",
            "properties": {},
            "sourcePath": "artifacts/darkstat/start.sh",
            "targetPath": "",
            "types": {}
          }
        },
        "attributes": {
          "state": {
            "constraints": [],
            "description": "The state of the node instance.",
            "value": "initial"
          },
          "tosca_id": {
            "constraints": [],
            "description": "A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.",
            "value": null
          },
          "tosca_name": {
            "constraints": [],
            "description": "This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
            "value": null
          }
        },
        "capabilities": {
          "feature": {
            "attributes": {},
            "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {},
            "types": {
              "tosca.capabilities.Node": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.2",
                  "normative": "true",
                  "role": "feature"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          },
          "sink": {
            "attributes": {
              "ip_address": {
                "constraints": [],
                "description": "Note: This is the IP address as propagated up by the associated node's host (Compute) container.",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.protected_port"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "76,13",
                  "name": "get_attribute",
                  "path": "topology_template.node_templates[\"packet_sink_software\"].capabilities[\"sink\"].attributes[\"ip_address\"]",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                }
              }
            },
            "description": "This is the default TOSCA type that should be used or extended to define a network endpoint capability. This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports. By default the Endpoint is assumed to represent an address on a private network unless otherwise specified.",
            "maxRelationshipCount": -1,
            "minRelationshipCount": 0,
            "properties": {
              "initiator": {
                "constraints": [
                  {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "source"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "target"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "peer"
                        }
                      ],
                      "location": "76,13",
                      "name": "valid_values",
                      "path": "topology_template.node_templates[\"packet_sink_software\"].capabilities[\"sink\"].attributes[\"ip_address\"]",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                ],
                "description": "The optional indicator of the direction of the connection.",
                "value": "target"
              },
              "network_name": {
                "constraints": [],
                "description": "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC | \u003cnetwork_name\u003e | \u003cnetwork_id\u003e.",
                "value": "PRIVATE"
              },
              "protocol": {
                "constraints": [],
                "description": "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http, https, ftp, tcp, udp, etc.",
                "value": "tcp"
              },
              "secure": {
                "constraints": [],
                "description": "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship.",
                "value": false
              }
            },
            "types": {
              "tosca.capabilities.Endpoint": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.7",
                  "normative": "true"
                }
              },
              "tosca.capabilities.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.5.1",
                  "normative": "true"
                }
              }
            }
          }
        },
        "description": "The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.",
        "directives": [],
        "interfaces": {
          "Configure": {
            "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
            "inputs": {},
            "notifications": {},
            "operations": {
              "add_source": {
                "dependencies": [],
                "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "add_target": {
                "dependencies": [],
                "description": "Operation to notify the source node of a target node being added via a relationship.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_source": {
                "dependencies": [],
                "description": "Operation to post-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "post_configure_target": {
                "dependencies": [],
                "description": "Operation to post-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_source": {
                "dependencies": [],
                "description": "Operation to pre-configure the source endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "pre_configure_target": {
                "dependencies": [],
                "description": "Operation to pre-configure the target endpoint.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_source": {
                "dependencies": [],
                "description": "Operation to remove the source node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "remove_target": {
                "dependencies": [],
                "description": "Operation to remove a target node.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "target_changed": {
                "dependencies": [],
                "description": "Operation to notify source some property or attribute of the target changed",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.relationship.Configure": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.5",
                  "normative": "true"
                }
              }
            }
          },
          "Standard": {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "inputs": {
              "host_ip_address": {
                "constraints": [],
                "description": "",
                "functionCall": {
                  "arguments": [
                    {
                      "constraints": [],
                      "description": "",
                      "value": "SELF"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "host"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "endpoint"
                    },
                    {
                      "constraints": [],
                      "description": "",
                      "value": "ip_address"
                    }
                  ],
                  "location": "28,13",
                  "name": "get_attribute",
                  "path": "node_types[\"cci.nodes.PacketSinkSoftware\"].interfaces[\"Standard\"].inputs[\"host_ip_address\"].value",
                  "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                }
              }
            },
            "notifications": {},
            "operations": {
              "configure": {
                "dependencies": [],
                "description": "Standard lifecycle configure operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "config"
                        }
                      ],
                      "location": "37,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketSinkSoftware\"].interfaces[\"Standard\"].operations[\"configure\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "create": {
                "dependencies": [],
                "description": "Standard lifecycle create operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "create"
                        }
                      ],
                      "location": "33,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketSinkSoftware\"].interfaces[\"Standard\"].operations[\"create\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "delete": {
                "dependencies": [],
                "description": "Standard lifecycle delete operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              },
              "start": {
                "dependencies": [],
                "description": "Standard lifecycle start operation.",
                "host": "",
                "implementation": "artifacts/run_remote.sh",
                "inputs": {
                  "script_file": {
                    "constraints": [],
                    "description": "",
                    "functionCall": {
                      "arguments": [
                        {
                          "constraints": [],
                          "description": "",
                          "value": "SELF"
                        },
                        {
                          "constraints": [],
                          "description": "",
                          "value": "start"
                        }
                      ],
                      "location": "41,15",
                      "name": "get_artifact",
                      "path": "node_types[\"cci.nodes.PacketSinkSoftware\"].interfaces[\"Standard\"].operations[\"start\"].inputs[\"script_file\"].value",
                      "url": "zip:file:C:\\Users\\rajee\\git\\tosca-models\\firewall1.csar!/firewall/flavors/packet_sink_function_service.yaml"
                    }
                  }
                },
                "outputs": {},
                "timeout": -1
              },
              "stop": {
                "dependencies": [],
                "description": "Standard lifecycle stop operation.",
                "host": "",
                "implementation": "",
                "inputs": {},
                "outputs": {},
                "timeout": -1
              }
            },
            "types": {
              "tosca.interfaces.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.3",
                  "normative": "true"
                }
              },
              "tosca.interfaces.node.lifecycle.Standard": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.8.4",
                  "normative": "true"
                }
              }
            }
          }
        },
        "name": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_software",
        "properties": {},
        "requirements": [
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Node",
            "name": "dependency",
            "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.linux_route",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Root",
            "path": "topology_template.node_templates[\"packet_sink_software\"].requirements[0]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a general dependency relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.DependsOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.2",
                    "normative": "true"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          },
          {
            "capabilityName": "",
            "capabilityPropertyConstraints": {},
            "capabilityTypeName": "tosca.capabilities.Compute",
            "name": "host",
            "nodeTemplateName": "packet_sink.firewall__flavors__packet_sink_function_service.yaml.packet_sink_host",
            "nodeTemplatePropertyConstraints": {},
            "nodeTypeName": "tosca.nodes.Compute",
            "path": "topology_template.node_templates[\"packet_sink_software\"].requirements[1]",
            "relationship": {
              "attributes": {
                "state": {
                  "constraints": [],
                  "description": "The state of the relationship instance.",
                  "value": "initial"
                },
                "tosca_id": {
                  "constraints": [],
                  "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                  "value": null
                },
                "tosca_name": {
                  "constraints": [],
                  "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                  "value": null
                }
              },
              "description": "This type represents a hosting relationship between two nodes.",
              "interfaces": {
                "Configure": {
                  "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                  "inputs": {},
                  "notifications": {},
                  "operations": {
                    "add_source": {
                      "dependencies": [],
                      "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "add_target": {
                      "dependencies": [],
                      "description": "Operation to notify the source node of a target node being added via a relationship.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_source": {
                      "dependencies": [],
                      "description": "Operation to post-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "post_configure_target": {
                      "dependencies": [],
                      "description": "Operation to post-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_source": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the source endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "pre_configure_target": {
                      "dependencies": [],
                      "description": "Operation to pre-configure the target endpoint.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_source": {
                      "dependencies": [],
                      "description": "Operation to remove the source node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "remove_target": {
                      "dependencies": [],
                      "description": "Operation to remove a target node.",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    },
                    "target_changed": {
                      "dependencies": [],
                      "description": "Operation to notify source some property or attribute of the target changed",
                      "host": "",
                      "implementation": "",
                      "inputs": {},
                      "outputs": {},
                      "timeout": -1
                    }
                  },
                  "types": {
                    "tosca.interfaces.Root": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.3",
                        "normative": "true"
                      }
                    },
                    "tosca.interfaces.relationship.Configure": {
                      "metadata": {
                        "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                        "citation_location": "5.8.5",
                        "normative": "true"
                      }
                    }
                  }
                }
              },
              "properties": {},
              "types": {
                "tosca.relationships.HostedOn": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.3",
                    "normative": "true",
                    "role": "host"
                  }
                },
                "tosca.relationships.Root": {
                  "metadata": {
                    "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                    "citation_location": "5.7.1",
                    "normative": "true"
                  }
                }
              }
            }
          }
        ],
        "types": {
          "cci.nodes.PacketSinkSoftware": {
            "metadata": {}
          },
          "tosca.nodes.Root": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.1",
              "normative": "true"
            }
          },
          "tosca.nodes.SoftwareComponent": {
            "metadata": {
              "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
              "citation_location": "5.9.4",
              "normative": "true"
            }
          }
        }
      },
      "edgesOut": [
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "feature",
            "description": "This type represents a general dependency relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "dependency",
            "properties": {},
            "types": {
              "tosca.relationships.DependsOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.2",
                  "normative": "true"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttKUH2JsWTPNjSXJNKYwFaNd"
        },
        {
          "metadata": {
            "puccini-tosca": {
              "kind": "relationship",
              "version": "1.0"
            }
          },
          "properties": {
            "attributes": {
              "state": {
                "constraints": [],
                "description": "The state of the relationship instance.",
                "value": "initial"
              },
              "tosca_id": {
                "constraints": [],
                "description": "A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.",
                "value": null
              },
              "tosca_name": {
                "constraints": [],
                "description": "This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.",
                "value": null
              }
            },
            "capability": "host",
            "description": "This type represents a hosting relationship between two nodes.",
            "interfaces": {
              "Configure": {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "inputs": {},
                "notifications": {},
                "operations": {
                  "add_source": {
                    "dependencies": [],
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "add_target": {
                    "dependencies": [],
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_source": {
                    "dependencies": [],
                    "description": "Operation to post-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "post_configure_target": {
                    "dependencies": [],
                    "description": "Operation to post-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_source": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the source endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "pre_configure_target": {
                    "dependencies": [],
                    "description": "Operation to pre-configure the target endpoint.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_source": {
                    "dependencies": [],
                    "description": "Operation to remove the source node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "remove_target": {
                    "dependencies": [],
                    "description": "Operation to remove a target node.",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  },
                  "target_changed": {
                    "dependencies": [],
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "host": "",
                    "implementation": "",
                    "inputs": {},
                    "outputs": {},
                    "timeout": -1
                  }
                },
                "types": {
                  "tosca.interfaces.Root": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.3",
                      "normative": "true"
                    }
                  },
                  "tosca.interfaces.relationship.Configure": {
                    "metadata": {
                      "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                      "citation_location": "5.8.5",
                      "normative": "true"
                    }
                  }
                }
              }
            },
            "name": "host",
            "properties": {},
            "types": {
              "tosca.relationships.HostedOn": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.3",
                  "normative": "true",
                  "role": "host"
                }
              },
              "tosca.relationships.Root": {
                "metadata": {
                  "citation": "[TOSCA-Simple-Profile-YAML-v1.3]",
                  "citation_location": "5.7.1",
                  "normative": "true"
                }
              }
            }
          },
          "targetID": "_1a8ttGFZ4gml6z1plLbPchrAO6J"
        }
      ]
    }
  }
}
